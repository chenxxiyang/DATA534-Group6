return(datalist)
}
a<-get_categories("00b8630a1745b3dda0d7ec926bba5c04")
a
#function for checking if api key is provided
apikey_check <- function(key = NULL){
if (is.null(key)){
stop("Please provide a zomato API key.")
}
}
#function for checking if api key is right
apikey_connectioncheck<-function(res){
print(res$code)
if (is.null(httr::content(res)$code)){
stop("please try another API key.")
}
}
#function for searching categories
get_categories <- function(key=NULL){
apikey_check(key)
baseurl <- "https://developers.zomato.com"
urlcate <- httr::modify_url(baseurl, path = "/api/v2.1/categories")
res <- httr::GET(
url = urlcate,
config = httr::add_headers("user-key" = key)
)
print(httr::content(res))
#apikey_connectioncheck(res) #check if the api key can used to connect to zomato
datalist <- jsonlite::fromJSON(
httr::content(
res, as = "text", type = "application/json", encoding = "UTF-8"
),
flatten = TRUE
)
datalist <- datalist$categories
return(datalist)
}
a<-get_categories("00b8630a1745b3dda0d7ec926bba5c04")
a
#function for searching categories
get_categories <- function(key=NULL){
apikey_check(key)
baseurl <- "https://developers.zomato.com"
urlcate <- httr::modify_url(baseurl, path = "/api/v2.1/categories")
res <- httr::GET(
url = urlcate,
config = httr::add_headers("user-key" = key)
)
#print(httr::content(res))
apikey_connectioncheck(res) #check if the api key can used to connect to zomato
datalist <- jsonlite::fromJSON(
httr::content(
res, as = "text", type = "application/json", encoding = "UTF-8"
),
flatten = TRUE
)
datalist <- datalist$categories
return(datalist)
}
a<-get_categories("00b8630a1745b3dda0d7ec926bba5c04")
#function for checking if api key is provided
apikey_check <- function(key = NULL){
if (is.null(key)){
stop("Please provide a zomato API key.")
}
}
#function for checking if api key is right
apikey_connectioncheck<-function(res){
if (!is.null(httr::content(res)$code)){
stop("please try another API key.")
}
}
#function for searching categories
get_categories <- function(key=NULL){
apikey_check(key)
baseurl <- "https://developers.zomato.com"
urlcate <- httr::modify_url(baseurl, path = "/api/v2.1/categories")
res <- httr::GET(
url = urlcate,
config = httr::add_headers("user-key" = key)
)
#print(httr::content(res))
apikey_connectioncheck(res) #check if the api key can used to connect to zomato
datalist <- jsonlite::fromJSON(
httr::content(
res, as = "text", type = "application/json", encoding = "UTF-8"
),
flatten = TRUE
)
datalist <- datalist$categories
return(datalist)
}
a<-get_categories("00b8630a1745b3dda0d7ec926bba5c04")
a
#function for searching categories
get_categories <- function(key=NULL){
apikey_check(key)
baseurl <- "https://developers.zomato.com"
urlcate <- httr::modify_url(baseurl, path = "/api/v2.1/categories")
res <- httr::GET(
url = urlcate,
config = httr::add_headers("user-key" = key)
)
#print(httr::content(res))
apikey_connectioncheck(res) #check if the api key can used to connect to zomato
datalist <- jsonlite::fromJSON(
httr::content(
res, as = "text", type = "application/json", encoding = "UTF-8"
),
flatten = TRUE
)
datalist <- datalist$categories
return(datalist)
}
a<-get_categories("00b8630a1745b3dda0d7ec926bba5c0")
#function for searching categories
get_categories <- function(key=NULL){
apikey_check(key)
baseurl <- "https://developers.zomato.com"
urlcate <- httr::modify_url(baseurl, path = "/api/v2.1/categories")
res <- httr::GET(
url = urlcate,
config = httr::add_headers("user-key" = key)
)
apikey_connectioncheck(res) #check if the api key can used to connect to zomato
datalist <- jsonlite::fromJSON(
httr::content(
res, as = "text", type = "application/json", encoding = "UTF-8"
),
flatten = TRUE
)
datalist <- datalist$categories
return(datalist)
}
#a<-get_categories("00b8630a1745b3dda0d7ec926bba5c04")
#a
#function for checking if api key is provided
apikey_check <- function(key = NULL){
if (is.null(key)){
stop("Please provide a zomato API key.")
}
}
#function for checking if api key is right
apikey_connectioncheck<-function(res){
if (!is.null(httr::content(res)$code)){
stop("please try another API key.")
}
}
a<-get_categories("00b8630a1745b3dda0d7ec926bba5c04")
a
httr::GET(url = "https://developers.zomato.com/api/v2.1/",config = httr::add_headers("user-key" = "00b8630a1745b3dda0d7ec926bba5c04")
)
#function for finding the Zomato ID and other details for a city
get_cities <- function(key,q,lat=NULL,lon=NULL,city_ids=NULL,count=NULL){
source("getcategories.R")
#check if given api
apikey_check(key)
#check if given city name
if (is.null(q)){
stop("Please enter the city name.")
}
baseurl <- "https://developers.zomato.com"
urlcate <- httr::modify_url(baseurl, path = "/api/v2.1/cities")
res <- httr::GET(
url = urlcate,
config = httr::add_headers("user-key" = key),
query = list("q"=q,"lat"=lat,"lon"=lon,"city_ids"=city_ids,"count"=count)
)
#check if the api key can used to connect to zomato
apikey_connectioncheck(res)
#read json into dataframe
datalist <- jsonlite::fromJSON(
httr::content(
res, as = "text", type = "application/json", encoding = "UTF-8"
),
flatten = TRUE
)
#check if return results
if (length(datalist$location_suggestions) == 0){
stop("Please try another city name.")
}
#only want the dataframe
datalist<-datalist$location_suggestions
return(datalist)
}
get_cities("00b8630a1745b3dda0d7ec926bba5c04","vancouver",lat="ab",count=12)
#function for checking if api key is provided
apikey_check <- function(key = NULL){
if (is.null(key)){
stop("Please provide a zomato API key.")
}
}
#function for checking if api key is right
apikey_connectioncheck<-function(res){
if (!is.null(httr::content(res)$code)){
stop("please try another API key.")
}
}
#function for finding the Zomato ID and other details for a city
get_cities <- function(key,q,lat=NULL,lon=NULL,city_ids=NULL,count=NULL){
#source("getcategories.R")
#check if given api
apikey_check(key)
#check if given city name
if (is.null(q)){
stop("Please enter the city name.")
}
baseurl <- "https://developers.zomato.com"
urlcate <- httr::modify_url(baseurl, path = "/api/v2.1/cities")
res <- httr::GET(
url = urlcate,
config = httr::add_headers("user-key" = key),
query = list("q"=q,"lat"=lat,"lon"=lon,"city_ids"=city_ids,"count"=count)
)
#check if the api key can used to connect to zomato
apikey_connectioncheck(res)
#read json into dataframe
datalist <- jsonlite::fromJSON(
httr::content(
res, as = "text", type = "application/json", encoding = "UTF-8"
),
flatten = TRUE
)
#check if return results
if (length(datalist$location_suggestions) == 0){
stop("Please try another city name.")
}
#only want the dataframe
datalist<-datalist$location_suggestions
return(datalist)
}
get_cities("00b8630a1745b3dda0d7ec926bba5c04","vancouver",lat="ab",count=12)
#function for finding the Zomato ID and other details for a city
get_cities <- function(key,q,lat=NULL,lon=NULL,city_ids=NULL,count=NULL){
#source("getcategories.R")
#check if given api
apikey_check(key)
#check if given city name
if (is.null(q)){
stop("Please enter the city name.")
}
baseurl <- "https://developers.zomato.com"
urlcate <- httr::modify_url(baseurl, path = "/api/v2.1/cities")
res <- httr::GET(
url = urlcate,
config = httr::add_headers("user-key" = key),
query = list("q"=q,"lat"=lat,"lon"=lon,"city_ids"=city_ids,"count"=count)
)
#check if the api key can used to connect to zomato
apikey_connectioncheck(res)
#read json into dataframe
datalist <- jsonlite::fromJSON(
httr::content(
res, as = "text", type = "application/json", encoding = "UTF-8"
),
flatten = TRUE
)
#check if return results
if (length(datalist$location_suggestions) == 0){
stop("Please try another city name.")
}
#only want the dataframe
datalist<-datalist$location_suggestions
return(datalist)
}
get_cities("00b8630a1745b3dda0d7ec926bba5c04","vancouver",lat="ab",lon="123",count=12)
#' @author
#' Yi Tang <tangyi2014@@gmail.com>
#'
#' @description
#' return the list of category types
#'
#' Enter parameter values
#' @param user-key your API key
#'
#' @return
#' category_id (integer) ID of the category type
#' category_name (string) Name of the category type
#'
#' @name
#' get_categories
#'
#' @title
#' category types
#'
#' @export
#' @examples
#' get_categories(key="xxxxxx")
#function for getting categories
get_categories <- function(key = NULL){
#check if given api
apikey_check(key)
baseurl <- "https://developers.zomato.com"
urlcate <- httr::modify_url(baseurl, path = "/api/v2.1/categories")
res <- httr::GET(
url = urlcate,
config = httr::add_headers("user-key" = key)
)
#check if the api key can used to connect to zomato
apikey_connectioncheck(res)
#read json into dataframe
datalist <- jsonlite::fromJSON(
httr::content(
res, as = "text", type = "application/json", encoding = "UTF-8"
),
flatten = TRUE
)
#only want the dataframe
datalist <- datalist$categories
return(datalist)
}
#function for checking if api key is provided
apikey_check <- function(key = NULL){
if (is.null(key)){
stop("Please provide a zomato API key.")
}
}
#function for checking if api can used to connect to zomato
apikey_connectioncheck<-function(res){
print(res)
if (!is.null(httr::content(res)$code)){
stop("please try another API key.")
}
}
#' @author
#' Yi Tang <tangyi2014@@gmail.com>
#'
#' @description
#' search for Zomato ID and other details for a city
#'
#' @param user-key your API key
#' @param q query by city name
#' @param lat latitude
#' @param lon longitude
#' @param city_ids comma separated city_id values
#' @param count number of max results to display
#'
#' @return
#' id (integer) ID of the city
#' name (string) City name
#' country_id (integer, optional) ID of the country
#' country_name (string, optional) Name of the country
#' is_state (boolean, optional) Whether this location is a state
#' state_id (integer, optional) ID of the state
#' state_name (string, optional) Name of the state
#' state_code (string, optional) Short code for the state
#'
#' @name
#' get_cities
#'
#' @title
#' get cities ID
#'
#' @export
#' @examples
#' get_cities(key="xxxxxx",q="xxx")
#function for finding the Zomato ID and other details for a city
get_cities <- function(key=NULL,q=NULL,lat=NULL,lon=NULL,city_ids=NULL,count=NULL){
#check if given api
apikey_check(key)
#check if given city name
if (is.null(q)){
stop("Please enter the city name.")
}
baseurl <- "https://developers.zomato.com"
urlcate <- httr::modify_url(baseurl, path = "/api/v2.1/cities")
res <- httr::GET(
url = urlcate,
config = httr::add_headers("user-key" = key),
query = list("q"=q,"lat"=lat,"lon"=lon,"city_ids"=city_ids,"count"=count)
)
#check if the api key can used to connect to zomato
apikey_connectioncheck(res)
#read json into dataframe
datalist <- jsonlite::fromJSON(
httr::content(
res, as = "text", type = "application/json", encoding = "UTF-8"
),
flatten = TRUE
)
#check if return results
if (length(datalist$location_suggestions) == 0){
stop("Please try another city name.")
}
#only want the dataframe
datalist<-datalist$location_suggestions
return(datalist)
}
#' @author
#' Yi Tang <tangyi2014@@gmail.com>
#'
#' @description
#' search for Zomato Restaurant Collections in a City
#'
#' @param user-key your API key
#' @param city_id id of the city for which collections are needed
#' @param lat latitude
#' @param lon longitude
#' @param count number of max results to display
#'
#' @return
#' collection_id (integer, optional) ID of the collection of restaurants
#' title (string, optional) Collection name
#' url (string, optional) URL of the collection page
#' description (string, optional) Short description of the collection
#' image_url (string, optional) URL for header image of the collection
#' res_count (integer, optional) Number of restaurants in the collection
#' share_url (string, optional) short URL for apps and social sharing
#'
#' @name
#' get_collections
#'
#' @title
#' get Zomato Restaurant collections
#'
#' @export
#' @examples
#' get_collections(key="xxxxxx",city_id=000)
#function for finding Zomato Restaurant Collections in a City
get_collections<-function(key=NULL,city_id=NULL,lat=NULL,lon=NULL,count=NULL){
#check if given api
apikey_check(key)
#check if given city_id
if (is.null(city_id)){
stop("Please enter the city ID. You can seach city ID by using get_cities function.")
}
baseurl <- "https://developers.zomato.com"
urlcate <- httr::modify_url(baseurl, path = "/api/v2.1/collections")
res <- httr::GET(
url = urlcate,
config = httr::add_headers("user-key" = key),
query = list("city_id"=city_id,"lat"=lat,"lon"=lon,"count"=count)
)
#check if the api key can used to connect to zomato
apikey_connectioncheck(res)
#read json into dataframe
datalist <- jsonlite::fromJSON(
httr::content(
res, as = "text", type = "application/json", encoding = "UTF-8"
),
flatten = TRUE
)
#check if return results
if (length(datalist$collections) == 0){
stop("Please try another city ID.")
}
#only want the dataframe
datalist<-datalist$collections
return(datalist)
}
#' @author
#' Yi Tang <tangyi2014@@gmail.com>
#'
#' @description
#' search for all cuisines of restaurants listed in a city
#'
#' @param user-key your API key
#' @param city_id id of the city for which collections are needed
#' @param lat latitude
#' @param lon longitude
#'
#' @return
#' cuisine_id (integer) ID of the cuisine
#' cuisine_name (string) Name of the cuisine
#'
#' @name
#' get_cuisines
#'
#' @title
#' get cuisines ID and name
#'
#' @export
#' @examples
#' get_cuisines(key="xxxxxx",city_id=000)
#function for finding all cuisines of restaurants listed in a city
get_cuisines<-function(key=NULL,city_id=NULL,lat=NULL,lon=NULL){
#check if given api
apikey_check(key)
#check if given city_id
if (is.null(city_id)){
stop("Please enter the city ID. You can seach city ID by using get_cities function.")
}
baseurl <- "https://developers.zomato.com"
urlcate <- httr::modify_url(baseurl, path = "/api/v2.1/cuisines")
res <- httr::GET(
url = urlcate,
config = httr::add_headers("user-key" = key),
query = list("city_id"=city_id,"lat"=lat,"lon"=lon)
)
#check if the api key can used to connect to zomato
apikey_connectioncheck(res)
#read json into dataframe
datalist <- jsonlite::fromJSON(
httr::content(
res, as = "text", type = "application/json", encoding = "UTF-8"
),
flatten = TRUE
)
#check if return results
if (length(datalist$cuisines) == 0){
stop("Please try another city ID.")
}
#only want the dataframe
datalist<-datalist$cuisines
return(datalist)
}
View(get_categories)
setwd("~/Desktop/DATA 534/git/zomator")
load_all()
library(devtools)
load_all()
library(testthat, lib.loc = "/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
